1) Agenda

2) Important points:
	
	- What is it => single source shortest path
	- brute force by considering all paths(eg. of exponential number of paths from source to destnation)
	- Why we use priority queues
		- Operations required: Contains Key=O(1), insert = O(log(v)), extract min = O(log(v)), decrease key = O(log(v)) 

	- significance of weight = 0 and weight < 0
		- (Weight == 0): 1) Graph = trade, eg: Inter - contries trade  
				 2) Graph = distance, eg: same place, therefore should be represented by same vertex
				 3) Graph = road traffic, eg: 0 weight can represent the road traffic.
		- (Weight < 0):  1) Reactions in chemistry
	
	- If all costs or edge weights are same, then we can use BFS
	- Intuition of water droplet falling in water(why BFS applies)
	- Can work for negative weights, but not always
	- doesn't work for negative weight => Is this complete (negative cycles cause a problem)
		- Case 1: Even though there are negative weights, but no negative cycle, the algo works
		- Case 2: If there are negative weights and also negative cycles, the also fails 
	
	- notion of relaxation: 
		- The relaxation process in Dijkstra's algorithm refers to updating the cost of all vertices connected to a vertex v,
		  if those costs would be improved by including the path via v

		- The notion of "relaxation" comes from an analogy between the estimate of the shortest path and the length of a helical tension spring, 
		  which is not designed for compression. Initially, the cost of the shortest path is an overestimate,
		  likened to a stretched out spring. As shorter paths are found, the estimated cost is lowered, 
		  and the spring is relaxed. Eventually, the shortest path, if one exists, is found 
                  and the spring has been relaxed to its resting length

	- make sure that you are also taking care of the parents of each node while relaxing the edges
	- Can we convert the graph with negative edges to non negative and solve the problem
		- https://www.quora.com/Can-you-add-a-large-constant-to-a-weighted-graph-with-negative-edges-so-that-all-the-weights-become-positive-then-run-Dijkstras-algorithm-starting-at-node-S-and-return-to-the-shortest-path-found-to-node-T-in-order-to-still-get-the-shortest-path
		
	- Greedy algorithm and mechanical explanation
	- Proof of Induction
	- Time complexity : V + E*log(V) where log(V) for insert and decrease key
		- Now, can this time complexity be further improved
	- Applications

3) Mathematical Induction:
	Goal: To prove (Statement)n or (S)n for all n>=1
		- Step 1: Prove that S1 is true ====> BASIS
		- Step2: Prove that, if (S)k is true for some k>=1, then (S) k+1 is true ===> INDUCTIVE STEP
